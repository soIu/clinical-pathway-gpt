{"version":3,"sources":["simulator.ts","send.ts","personas.tsx","App.tsx","index.tsx"],"names":["nluxSimulator","_prompt","_simulatorEnabled","_promptInput","_setInputValue","_nativeTextAreaValueSetter","Object","getOwnPropertyDescriptor","window","HTMLTextAreaElement","prototype","set","simulatorEnabled","enableSimulator","disableSimulator","prompt","setPrompt","checkForPromptSimulation","onPromptInputDetected","promptInput","value","call","dispatchEvent","Event","bubbles","promptToType","addEventListener","typeNextChar","length","submitOnDoneTyping","submitButton","document","querySelector","slice","interval","Math","floor","random","setTimeout","checkInputInterval","setInterval","nluxAiChatPromptInput","clearInterval","history","send","async","observer","response","fetch","encodeURIComponent","method","status","error","Error","body","reader","getReader","textDecoder","TextDecoder","done","read","content","decode","next","complete","personas","assistant","name","avatar","tagline","user","adapter","useAsStreamAdapter","_jsx","AiChat","personaOptions","displayOptions","colorScheme","element","getElementById","createRoot","render","StrictMode","children","App"],"mappings":"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","file":"static/js/main.6ace40a1.chunk.js","sourcesContent":["\r\n// JavaScript code to simulate typing in the composer of the chatbot\r\nconst nluxSimulator = (() => {\r\n  let _prompt: string | null = null;\r\n  let _simulatorEnabled: boolean = false;\r\n\r\n  let _promptInput: HTMLTextAreaElement | null = null;\r\n  let _setInputValue: ((value: string) => void) | null = null;\r\n\r\n  var _nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(\r\n    window.HTMLTextAreaElement.prototype,\r\n    \"value\"\r\n  ).set;\r\n\r\n  return {\r\n    get simulatorEnabled() {\r\n      return _simulatorEnabled;\r\n    },\r\n    enableSimulator: () => {\r\n      _simulatorEnabled = true;\r\n    },\r\n    disableSimulator: () => {\r\n      _simulatorEnabled = false;\r\n      _setInputValue = null;\r\n    },\r\n    get prompt() {\r\n      return _prompt;\r\n    },\r\n    setPrompt(prompt: string) {\r\n      _prompt = prompt;\r\n      nluxSimulator.checkForPromptSimulation();\r\n    },\r\n    onPromptInputDetected: (promptInput: HTMLTextAreaElement) => {\r\n      _promptInput = promptInput;\r\n      _setInputValue = (value /* string */) => {\r\n        if (_nativeTextAreaValueSetter) {\r\n          _nativeTextAreaValueSetter.call(_promptInput, value);\r\n        }\r\n\r\n        _promptInput.dispatchEvent(new Event(\"input\", { bubbles: true }));\r\n      };\r\n\r\n      nluxSimulator.checkForPromptSimulation();\r\n    },\r\n    checkForPromptSimulation: () => {\r\n      if (!_prompt || !_promptInput || !_simulatorEnabled) {\r\n        return;\r\n      }\r\n\r\n      let promptToType = nluxSimulator.prompt;\r\n      if (!promptToType) {\r\n        return;\r\n      }\r\n\r\n      _promptInput.addEventListener(\"focus\", () => {\r\n        nluxSimulator.disableSimulator();\r\n      });\r\n\r\n      _promptInput.addEventListener(\"keydown\", () => {\r\n        nluxSimulator.disableSimulator();\r\n      });\r\n\r\n      const submitOnDoneTyping = () => {\r\n        if (nluxSimulator.simulatorEnabled) {\r\n          const submitButton = document.querySelector(\r\n            \".nlux-AiChat-root .nlux-comp-composer > button\"\r\n          );\r\n\r\n          if (submitButton) {\r\n            submitButton.dispatchEvent(new Event(\"click\", { bubbles: true }));\r\n          }\r\n\r\n          nluxSimulator.disableSimulator();\r\n        }\r\n      };\r\n\r\n      const typeNextChar = () => {\r\n        if (!nluxSimulator.simulatorEnabled) {\r\n          return;\r\n        }\r\n\r\n        if (promptToType.length === 0) {\r\n          submitOnDoneTyping();\r\n          return;\r\n        }\r\n\r\n        if (_setInputValue) {\r\n          _setInputValue(_promptInput.value + promptToType[0]);\r\n        }\r\n\r\n        promptToType = promptToType.slice(1);\r\n        const interval = Math.floor(Math.random() * 60) + 20;\r\n        setTimeout(typeNextChar, interval);\r\n      };\r\n\r\n      typeNextChar();\r\n    },\r\n  };\r\n})();\r\n\r\nconst checkInputInterval = setInterval(() => {\r\n  const nluxAiChatPromptInput = document.querySelector(\r\n    \".nlux-AiChat-root .nlux-comp-composer > textarea\"\r\n  ) as HTMLTextAreaElement | null;\r\n\r\n  if (nluxAiChatPromptInput) {\r\n    clearInterval(checkInputInterval);\r\n    if (typeof nluxSimulator.onPromptInputDetected === \"function\") {\r\n      setTimeout(() => {\r\n        nluxSimulator.onPromptInputDetected(nluxAiChatPromptInput);\r\n      }, 1000);\r\n    }\r\n  }\r\n}, 200);\r\n\r\n\r\nsetTimeout(() => { nluxSimulator?.enableSimulator();\r\n nluxSimulator?.setPrompt(\"Who are you?\"); }, 1000);\r\n\r\nexport {};\r\n","import { StreamSend, StreamingAdapterObserver } from '@nlux/react';\r\n\r\n\r\nlet history = '';\r\n\r\n// Function to send query to the server and receive a stream of chunks as response\r\nexport const send: StreamSend = async (\r\n    prompt: string,\r\n    observer: StreamingAdapterObserver,\r\n) => {\r\n    \r\n    const response = await fetch('/chat?query=' + encodeURIComponent(prompt) + '&history=' + encodeURIComponent(history), {\r\n        method: 'GET',\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n        observer.error(new Error('Failed to connect to the server'));\r\n        return;\r\n    }\r\n\r\n    if (!response.body) {\r\n        return;\r\n    }\r\n    history += prompt + '\\n';\r\n\r\n    // Read a stream of server-sent events\r\n    // and feed them to the observer as they are being generated\r\n    const reader = response.body.getReader();\r\n    const textDecoder = new TextDecoder();\r\n\r\n    while (true) {\r\n        const {value, done} = await reader.read();\r\n        if (done) {\r\n            history += '\\n';\r\n            break;\r\n        }\r\n\r\n        const content = textDecoder.decode(value);\r\n        history += content;\r\n        if (content) {\r\n            observer.next(content);\r\n        }\r\n    }\r\n\r\n    observer.complete();\r\n};\r\n","import { PersonaOptions } from '@nlux/react';\r\n\r\nconst assistantAvatar = 'https://docs.nlkit.com/nlux/images/personas/hawking.png';\r\nconst userAvatar = 'https://docs.nlkit.com/nlux/images/personas/marissa.png';\r\n\r\nexport const personas: PersonaOptions = {\r\n    assistant: {\r\n        name: 'Clinical Pathway',\r\n        avatar: assistantAvatar,\r\n        tagline: '',\r\n    },\r\n    user: {\r\n        name: 'Marissa',\r\n        avatar: userAvatar,\r\n    }\r\n};\r\n","import { AiChat, useAsStreamAdapter } from '@nlux/react';\r\nimport '@nlux/themes/nova.css';\r\n\r\nimport { send } from './send';\r\nimport { personas } from './personas';\r\n\r\nexport default () => {\r\n    const adapter = useAsStreamAdapter(send, []);\r\n    return (\r\n        <AiChat\r\n            adapter={ adapter }\r\n            personaOptions={ personas }\r\n            displayOptions={{ colorScheme: 'dark' }}\r\n        />\r\n    );\r\n};","import { StrictMode } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport \"./styles.css\";\r\nimport \"./simulator\";\r\n\r\nimport App from \"./App\";\r\nconst element = document.getElementById(\"root\");\r\nif (element) {\r\n  const root = createRoot(element);\r\n\r\n  root.render(\r\n    <StrictMode>\r\n      <App />\r\n    </StrictMode>\r\n  );\r\n}\r\n"],"sourceRoot":""}